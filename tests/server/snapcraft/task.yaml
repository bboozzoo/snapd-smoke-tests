# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: Canonical Ltd.
environment:
    LXD_TRACK/5: "5.0"
    LXD_TRACK/5_21: "5.21"
    LXD_TRACK/6: 6
    LXD_TRACK/latest: latest
execute: |
    snap run snapcraft --help 2>&1 | MATCH 'Package, distribute, and update snaps for Linux and IoT'
    ( cd test-snapd-smoke && snap run snapcraft -v )
    snap install --dangerous ./test-snapd-smoke/test-snapd-smoke_1.0.0_*.snap
    snap run test-snapd-smoke | MATCH "I'm a snap!"
# This task fails because LXD container created by snapcraft cannot access network.
manual: true
debug: |
    snap run lxd.lxc project list || true
    snap run lxd.lxc list --project=snapcraft || true
    snap run lxd.lxc network show lxdbr0
    ip addr list
    ip link list
    if command -v iptables; then
        iptables -t nat -L POSTROUTING
    fi
    cat ~/.local/state/snapcraft/log/snapcraft-*.log || true
prepare: |
    snap-install lxd ${LXD_TRACK}/"${X_SPREAD_LXD_RISK_LEVEL}"
    # LXD is not immediately ready to accept API requets.
    snap run lxd waitready
    # Initialize LXD storage and networking with default settings.
    snap run lxd init --auto
    # Allow LXD to connect to the network on systems where Docker is also installed.
    if [ -n "$(command -v docker)" ]; then
        if command -v iptables; then
            iptables -I DOCKER-USER -i lxdbr0 -j ACCEPT || true
            iptables -I DOCKER-USER -o lxdbr0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT || true
        fi
        if command -v ip6tables; then
            ip6tables -I DOCKER-USER -i lxdbr0 -j ACCEPT || true
            ip6tables -I DOCKER-USER -o lxdbr0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT || true
        fi
    fi
    # Install snapcraft for building a snap.
    snap-install --classic snapcraft latest/"${X_SPREAD_SNAPCRAFT_RISK_LEVEL}"
restore: |
    snap remove --purge test-snapd-smoke || true
    snap remove --purge snapcraft
    snap remove --purge lxd
summary: Install and see Snapcraft help output.
